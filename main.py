#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —Ä–µ–µ—Å—Ç—Ä–æ–≤ –°–†–û –ê–ê–° (–°–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–æ–≤)

–ê–≤—Ç–æ—Ä: [ada]
"""

import sys
import os
from datetime import datetime

from config import REGISTRIES
from parsers.organizations_parser import OrganizationsParser
from parsers.auditors_parser import AuditorsParser
from parsers.generic_parser import GenericRegistryParser
from utils.excel_exporter import ExcelExporter
from utils.logger import setup_logger


def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë          –ü–ê–†–°–ï–† –†–ï–ï–°–¢–†–û–í –°–†–û –ê–ê–°                          ‚ïë
    ‚ïë   –°–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–æ–≤                 ‚ïë
    ‚ïë              –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è ¬´–°–æ–¥—Ä—É–∂–µ—Å—Ç–≤–æ¬ª                     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def print_menu():
    """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    print("\n" + "=" * 60)
    print("–î–û–°–¢–£–ü–ù–´–ï –†–ï–ï–°–¢–†–´:")
    print("=" * 60)

    print("\nüìã –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –ß–õ–ï–ù–´ –ò –í–´–î–ê–ù–ù–´–ï –ê–¢–¢–ï–°–¢–ê–¢–´:")
    print("  1. –†–µ–µ—Å—Ç—Ä —á–ª–µ–Ω–æ–≤ ‚Äî –∞—É–¥–∏—Ç–æ—Ä–æ–≤ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤ ‚≠ê")
    print("  2. –†–µ–µ—Å—Ç—Ä —á–ª–µ–Ω–æ–≤ ‚Äî –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π ‚≠ê")
    print("  3. –†–µ–µ—Å—Ç—Ä –≤—ã–¥–∞–Ω–Ω—ã—Ö –°–†–û –ê–ê–° –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ç–æ–≤ ‚≠ê")
    print("  4. –ü–µ—Ä–µ—á–µ–Ω—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤ ‚≠ê")
    print("  5. –†–µ–µ—Å—Ç—Ä —É—á–µ–±–Ω–æ-–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ ‚≠ê")
    print("  6. –°–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –û–ü–ü–ö –∞—É–¥–∏—Ç–æ—Ä–∞–º–∏ ‚≠ê")
    print("  7. –°–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ü–ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∞—É–¥–∏—Ç–∞ –û–ó–û –§–† ‚≠ê")

    print("\n‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –ß–õ–ï–ù–´ –ò –ê–ù–ù–£–õ–ò–†–û–í–ê–ù–ù–´–ï –ê–¢–¢–ï–°–¢–ê–¢–´:")
    print("  8. –†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–æ–≤, –ø—Ä–µ–∫—Ä–∞—Ç–∏–≤—à–∏—Ö —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –°–†–û –ê–ê–° ‚≠ê")
    print("  9. –†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –ø—Ä–µ–∫—Ä–∞—Ç–∏–≤—à–∏—Ö —á–ª–µ–Ω—Å—Ç–≤–æ ‚≠ê")
    print(" 10. –†–µ–µ—Å—Ç—Ä –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ç–æ–≤ ‚≠ê")
    print(" 11. –£–ú–¶, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –°–†–û –ê–ê–° ‚≠ê")

    print("\n‚ö†Ô∏è  –î–ò–°–¶–ò–ü–õ–ò–ù–ê–†–ù–´–ï –ú–ï–†–´:")
    print(" 12. –ú–µ—Ä—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫ –∞—É–¥–∏—Ç–æ—Ä–∞–º ‚≠ê")
    print(" 13. –ú–µ—Ä—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º ‚≠ê")

    print("\nüåê –°–ï–¢–ò –ê–£–î–ò–¢–û–†–°–ö–ò–• –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô:")
    print(" 14. –ü–µ—Ä–µ—á–µ–Ω—å —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å–µ—Ç–µ–π ‚≠ê")

    print("\n" + "=" * 60)
    print("  0. –í—ã—Ö–æ–¥")
    print("=" * 60)
    print("\n‚≠ê - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä")


def parse_organizations(detailed=False):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–µ—Å—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π

    Args:
        detailed: –ü–∞—Ä—Å–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    logger = setup_logger("main")

    print("\n" + "=" * 60)
    print("–ü–ê–†–°–ò–ù–ì –†–ï–ï–°–¢–†–ê –ê–£–î–ò–¢–û–†–°–ö–ò–• –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô")
    print("=" * 60)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if detailed:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!")
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
        if choice != "y":
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        parser = OrganizationsParser()

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        organizations = parser.parse_to_objects(detailed=detailed)

        if not organizations:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.")
            return

        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(organizations)}")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        print("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel...")
        exporter = ExcelExporter()

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"organizations_{timestamp}"

        filepath = exporter.export_organizations(organizations, filename=filename)

        if filepath:
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"üìÅ –§–∞–π–ª: {os.path.abspath(filepath)}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(organizations)}")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def parse_generic_registry(registry_key: str, registry_name: str, detailed=False):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª—é–±–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞

    Args:
        registry_key: –ö–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞ –∏–∑ config.REGISTRIES
        registry_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        detailed: –ü–∞—Ä—Å–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    logger = setup_logger("main")

    print("\n" + "=" * 60)
    print(f"–ü–ê–†–°–ò–ù–ì: {registry_name.upper()}")
    print("=" * 60)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if detailed:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!")
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
        if choice != "y":
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        parser = GenericRegistryParser(registry_key)

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        data = parser.parse_registry(detailed=detailed)

        if not data:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.")
            return

        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        print("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel...")
        exporter = ExcelExporter()

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"{registry_key}_{timestamp}"

        filepath = exporter.export_to_excel(
            data=data,
            filename=filename,
            sheet_name=registry_name[:30],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è Excel
        )

        if filepath:
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"üìÅ –§–∞–π–ª: {os.path.abspath(filepath)}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def parse_auditors(detailed=False):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–µ—Å—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–æ–≤"""
    logger = setup_logger("main")

    print("\n" + "=" * 60)
    print("–ü–ê–†–°–ò–ù–ì –†–ï–ï–°–¢–†–ê –ê–£–î–ò–¢–û–†–û–í")
    print("=" * 60)

    if detailed:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!")
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
        if choice != "y":
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    try:
        parser = AuditorsParser()
        print("\nüîÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        auditors = parser.parse_to_objects(detailed=detailed)

        if not auditors:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.")
            return

        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(auditors)}")

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        print("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel...")
        exporter = ExcelExporter()

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"auditors_{timestamp}"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
        data = [auditor.to_dict() for auditor in auditors]
        filepath = exporter.export_to_excel(
            data=data, filename=filename, sheet_name="–ê—É–¥–∏—Ç–æ—Ä—ã"
        )

        if filepath:
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"üìÅ –§–∞–π–ª: {os.path.abspath(filepath)}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(auditors)}")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def not_implemented():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    print("üí° –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å OrganizationsParser.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print_banner()

    # –ú–∞–ø–ø–∏–Ω–≥ –≤—ã–±–æ—Ä–∞ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä—ã
    registry_map = {
        "1": ("auditors", "–†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–æ–≤ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤"),
        "2": ("organizations", "–†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"),
        "3": ("certificates", "–†–µ–µ—Å—Ç—Ä –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ç–æ–≤"),
        "4": ("individual_auditors", "–ü–µ—Ä–µ—á–µ–Ω—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤"),
        "5": ("training_centers", "–†–µ–µ—Å—Ç—Ä —É—á–µ–±–Ω–æ-–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"),
        "6": ("oppk_confirmation", "–°–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –û–ü–ü–ö"),
        "7": ("ozo_training", "–°–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ü–ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"),
        "8": ("excluded_auditors", "–†–µ–µ—Å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–æ–≤"),
        "9": ("excluded_organizations", "–†–µ–µ—Å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"),
        "10": ("cancelled_certificates", "–†–µ–µ—Å—Ç—Ä –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ç–æ–≤"),
        "11": ("excluded_training_centers", "–£–ú–¶ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"),
        "12": ("disciplinary_auditors", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ä—ã –∫ –∞—É–¥–∏—Ç–æ—Ä–∞–º"),
        "13": ("disciplinary_organizations", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ä—ã –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º"),
        "14": ("audit_networks", "–ü–µ—Ä–µ—á–µ–Ω—å —Å–µ—Ç–µ–π –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"),
    }

    while True:
        print_menu()

        choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–µ—Å—Ç—Ä (0-14): ").strip()

        if choice == "0":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)

        elif choice == "1":
            # –†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä–æ–≤ - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            print(f"\nüìã –í—ã–±—Ä–∞–Ω: {registry_map[choice][1]}")
            detail_choice = input("–ü–∞—Ä—Å–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã? (y/n): ").lower()
            detailed = detail_choice == "y"
            parse_auditors(detailed=detailed)

        elif choice == "2":
            # –†–µ–µ—Å—Ç—Ä –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            print(f"\nüìã –í—ã–±—Ä–∞–Ω: {registry_map[choice][1]}")
            detail_choice = input("–ü–∞—Ä—Å–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã? (y/n): ").lower()
            detailed = detail_choice == "y"
            parse_organizations(detailed=detailed)

        elif choice in registry_map:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            registry_key, registry_name = registry_map[choice]
            print(f"\nüìã –í—ã–±—Ä–∞–Ω: {registry_name}")
            detail_choice = input("–ü–∞—Ä—Å–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã? (y/n): ").lower()
            detailed = detail_choice == "y"
            parse_generic_registry(registry_key, registry_name, detailed=detailed)

        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
